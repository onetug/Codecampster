trigger:
- master

pr: none

variables:
  ACR.ContainerRegistryServiceConnnection: 'codecampster-nebbia-registry'
  DockerHub.ContainerRegistryServiceConnnection: 'orlando-codecamp-registry'
  Azure.ServiceConnection: 'codecampster-nebbia-partner'
  PrimaryRegion: 'eastus'

stages:
- stage: build
  displayName: Build and Push
  jobs:  
  - job: build_greenfield
    displayName: Build and Push Greenfield
    pool:
      image: 'ubuntu-latest'
    variables: 
      App.Dockerfile: src/Web/CodeCampster.Web/Dockerfile
      DockerHub.OrganizationName: orlandocodecamp
    steps:
    - task: Docker@2
      displayName: Build and Push
      inputs:
        command: buildAndPush
        containerRegistry: $(DockerHub.ContainerRegistryServiceConnnection)
        repository: $(DockerHub.OrganizationName)/codecampster
        buildContext: .
        Dockerfile: $(App.Dockerfile)
        tags: |
          $(Build.BuildNumber)
          latest
    - task: CopyFiles@2
      displayName: "Copying IaC to artifacts directory"
      inputs:
        SourceFolder: 'iac'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      displayName: "Publishing Build Artifacts"
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'iac'
        publishLocation: 'Container'
- stage: deploy_production
  displayName: "Production"
  dependsOn: ['build']
  pool:
    image: 'ubuntu-latest'
  jobs:    
    - job: deploy_production_webapp
      displayName: "Deploy Web App to Production"
      variables: 
        Environment: prod
        ResourceGroup: rg-codecamp-$(Environment)-001
        FullImageTag: orlandocodecamp/codecampster:$(Build.BuildNumber)
      steps: 
      - download: current
      - task: AzureResourceManagerTemplateDeployment@3
        displayName: ARM Template Deployment
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: '$(Azure.ServiceConnection)'
          action: 'Create Or Update Resource Group'
          resourceGroupName: '$(ResourceGroup)'
          location: '$(PrimaryRegion)'
          templateLocation: 'Linked artifact'
          csmFile: '$(Pipeline.Workspace)/iac/armdeploy.json'
          csmParametersFile: '$(Pipeline.Workspace)/iac/armdeploy.parameters.json'
          overrideParameters: "-name azapp-codecampster-$(Environment)-001
                              -hostingPlanName azapp-codecampster-$(Environment)-001-sp
                              -fullImageTag $(FullImageTag)"
          deploymentMode: 'Incremental'
    - job: deploy_production_networking
      displayName: "Deploy Networking Resources"
      variables: 
        Environment: prod
        ResourceGroup: rg-codecamp-core-001
        lockType: 'delete'
      steps:
        - download: current
        - template: templates/toggleResourceGroupLock.yml
          parameters:
            ARMServiceConnection: '$(Azure.ServiceConnection)'
            SubscriptionId: $(SubscriptionId)
            AzureRegion: '$(PrimaryRegion)'
            ResourceGroupName: '$(ResourceGroup)'
            LockType: '$(lockType)'
            LockState: 'Disabled'
        - task: AzureResourceManagerTemplateDeployment@3
          displayName: 'ARM deployment: Azure Front Door'
          inputs:
            deploymentScope: 'Resource Group'
            azureResourceManagerConnection: '$(Azure.ServiceConnection)'
            subscriptionId: $(SubscriptionId)
            resourceGroupName: $(ResourceGroup)
            location: '$(PrimaryRegion)'
            csmFile: '$(System.DefaultWorkingDirectory)/iac/FrontDoor.json'
            csmParametersFile: '$(System.DefaultWorkingDirectory)/iac/FrontDoor-$(Environment).parameters.json'
            deploymentMode: 'Incremental'
            deploymentOutputs: 'Outputs.ArmJsonRaw'
        - template: templates/toggleResourceGroupLock.yml
          parameters:
            ARMServiceConnection: '$(Azure.ServiceConnection)'
            SubscriptionId: $(SubscriptionId)
            AzureRegion: '$(PrimaryRegion)'
            ResourceGroupName: $(ResourceGroup)
            LockType: '$(lockType)'
            LockState: 'Enabled'